
// ==================================================================
// DocumentRegisterTask.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Client
{
  public class DocumentRegisterTask :
    global::Sungero.Workflow.Client.Task, global::GD.DCSGovernmentModule.IDocumentRegisterTask
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("d574cc38-2354-46fa-85d6-686c525f182b");

    public override global::System.Guid TypeGuid
    {
      get { return global::GD.DCSGovernmentModule.Client.DocumentRegisterTask.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "GD.DCSGovernmentModule.IDocumentRegisterTask, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Subject; }
        set { this.Subject = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Subject"; }
      }


    public new global::GD.DCSGovernmentModule.IDocumentRegisterTaskState State
    {
      get
      {
        return (global::GD.DCSGovernmentModule.IDocumentRegisterTaskState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskState(this);
    }

    public new global::GD.DCSGovernmentModule.IDocumentRegisterTaskInfo Info
    {
      get
      {
        return (global::GD.DCSGovernmentModule.IDocumentRegisterTaskInfo)base.Info;
      }
    }

    public new global::GD.DCSGovernmentModule.IDocumentRegisterTaskAccessRights AccessRights
    {
      get
      {
        return (global::GD.DCSGovernmentModule.IDocumentRegisterTaskAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::GD.DCSGovernmentModule.Client.DocumentRegisterTaskAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?> _WasRedirected;

        public virtual global::System.Boolean? WasRedirected
        {
          get { return this._WasRedirected.Value; }
          set { this._WasRedirected.Value = value; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::DirRX.DCTSIntegration.IProcessingRuleBase> _ProcessingRule;

              public virtual global::DirRX.DCTSIntegration.IProcessingRuleBase ProcessingRule
              {
              get
              {
                return this._ProcessingRule.Value as global::DirRX.DCTSIntegration.IProcessingRuleBase;
              }

              set
              {
                (this._ProcessingRule as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.RecordManagement.IIncomingLetter> _Letter;

              public virtual global::Sungero.RecordManagement.IIncomingLetter Letter
              {
              get
              {
                return this._Letter.Value as global::Sungero.RecordManagement.IIncomingLetter;
              }

              set
              {
                (this._Letter as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::GD.CitizenRequests.IRequest> _Request;

              public virtual global::GD.CitizenRequests.IRequest Request
              {
              get
              {
                return this._Request.Value as global::GD.CitizenRequests.IRequest;
              }

              set
              {
                (this._Request as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Company.IEmployee> _Registrar;

              public virtual global::Sungero.Company.IEmployee Registrar
              {
              get
              {
                return this._Registrar.Value as global::Sungero.Company.IEmployee;
              }

              set
              {
                (this._Registrar as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Company.IBusinessUnit> _BusinessUnit;

              public virtual global::Sungero.Company.IBusinessUnit BusinessUnit
              {
              get
              {
                return this._BusinessUnit.Value as global::Sungero.Company.IBusinessUnit;
              }

              set
              {
                (this._BusinessUnit as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }










    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::GD.DCSGovernmentModule.Client.DocumentRegisterTaskActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::GD.DCSGovernmentModule.Client.DocumentRegisterTaskCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::GD.DCSGovernmentModule.Client.DocumentRegisterTaskAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::GD.DCSGovernmentModule.Client.DocumentRegisterTaskAnyChildEntityCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::GD.DCSGovernmentModule.Client.DocumentRegisterTaskFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::GD.DCSGovernmentModule.DocumentRegisterTaskClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::GD.DCSGovernmentModule.DocumentRegisterTaskSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void ProcessingRuleChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskProcessingRuleChangedEventArgs(this.State.Properties.ProcessingRule, this.ProcessingRule, this);
     ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).ProcessingRuleChanged(args);
    }

    protected void LetterChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskLetterChangedEventArgs(this.State.Properties.Letter, this.Letter, this);
     ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).LetterChanged(args);
    }

    protected void RequestChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskRequestChangedEventArgs(this.State.Properties.Request, this.Request, this);
     ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).RequestChanged(args);
    }

    protected void RegistrarChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskRegistrarChangedEventArgs(this.State.Properties.Registrar, this.Registrar, this);
     ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).RegistrarChanged(args);
    }

    protected void BusinessUnitChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskBusinessUnitChangedEventArgs(this.State.Properties.BusinessUnit, this.BusinessUnit, this);
     ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).BusinessUnitChanged(args);
    }

    protected void WasRedirectedChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.WasRedirected, this.WasRedirected, this);
     ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).WasRedirectedChanged(args);
    }




  protected global::DirRX.DCTSIntegration.IProcessingRuleBase ProcessingRuleValueInputHandler(global::DirRX.DCTSIntegration.IProcessingRuleBase value)
  {
    var args = new global::GD.DCSGovernmentModule.Client.DocumentRegisterTaskProcessingRuleValueInputEventArgs(this.ProcessingRule, value, this, this.Info.Properties.ProcessingRule);
    ((global::GD.DCSGovernmentModule.DocumentRegisterTaskClientHandlers)this.Handlers).ProcessingRuleValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.RecordManagement.IIncomingLetter LetterValueInputHandler(global::Sungero.RecordManagement.IIncomingLetter value)
  {
    var args = new global::GD.DCSGovernmentModule.Client.DocumentRegisterTaskLetterValueInputEventArgs(this.Letter, value, this, this.Info.Properties.Letter);
    ((global::GD.DCSGovernmentModule.DocumentRegisterTaskClientHandlers)this.Handlers).LetterValueInput(args);
    return args.NewValue;
  }

  protected global::GD.CitizenRequests.IRequest RequestValueInputHandler(global::GD.CitizenRequests.IRequest value)
  {
    var args = new global::GD.DCSGovernmentModule.Client.DocumentRegisterTaskRequestValueInputEventArgs(this.Request, value, this, this.Info.Properties.Request);
    ((global::GD.DCSGovernmentModule.DocumentRegisterTaskClientHandlers)this.Handlers).RequestValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Company.IEmployee RegistrarValueInputHandler(global::Sungero.Company.IEmployee value)
  {
    var args = new global::GD.DCSGovernmentModule.Client.DocumentRegisterTaskRegistrarValueInputEventArgs(this.Registrar, value, this, this.Info.Properties.Registrar);
    ((global::GD.DCSGovernmentModule.DocumentRegisterTaskClientHandlers)this.Handlers).RegistrarValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Company.IBusinessUnit BusinessUnitValueInputHandler(global::Sungero.Company.IBusinessUnit value)
  {
    var args = new global::GD.DCSGovernmentModule.Client.DocumentRegisterTaskBusinessUnitValueInputEventArgs(this.BusinessUnit, value, this, this.Info.Properties.BusinessUnit);
    ((global::GD.DCSGovernmentModule.DocumentRegisterTaskClientHandlers)this.Handlers).BusinessUnitValueInput(args);
    return args.NewValue;
  }

  protected global::System.Boolean? WasRedirectedValueInputHandler(global::System.Boolean? value)
  {
    var args = new global::Sungero.Presentation.BooleanValueInputEventArgs(this.WasRedirected, value, this, this.Info.Properties.WasRedirected);
    ((global::GD.DCSGovernmentModule.DocumentRegisterTaskClientHandlers)this.Handlers).WasRedirectedValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors









              protected virtual void InitProcessingRuleNavigationProperty()
              {
                this._ProcessingRule = new global::Sungero.Domain.Client.NavigationProperty<global::DirRX.DCTSIntegration.IProcessingRuleBase>("ProcessingRule", this);
                this._ProcessingRule.ValueChanged += (sender, e) => { this.ProcessingRuleChangedHandler(); };
                this.AddProperty(this._ProcessingRule as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitLetterNavigationProperty()
              {
                this._Letter = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.RecordManagement.IIncomingLetter>("Letter", this);
                this._Letter.ValueChanged += (sender, e) => { this.LetterChangedHandler(); };
                this.AddProperty(this._Letter as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitRequestNavigationProperty()
              {
                this._Request = new global::Sungero.Domain.Client.NavigationProperty<global::GD.CitizenRequests.IRequest>("Request", this);
                this._Request.ValueChanged += (sender, e) => { this.RequestChangedHandler(); };
                this.AddProperty(this._Request as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitRegistrarNavigationProperty()
              {
                this._Registrar = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Company.IEmployee>("Registrar", this);
                this._Registrar.ValueChanged += (sender, e) => { this.RegistrarChangedHandler(); };
                this.AddProperty(this._Registrar as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitBusinessUnitNavigationProperty()
              {
                this._BusinessUnit = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Company.IBusinessUnit>("BusinessUnit", this);
                this._BusinessUnit.ValueChanged += (sender, e) => { this.BusinessUnitChangedHandler(); };
                this.AddProperty(this._BusinessUnit as global::Sungero.Domain.Client.IProperty);
              }



            protected override void InitObserversCollectionProperty()
            {
              this._Observers = new global::Sungero.Domain.Client.ListProperty<global::GD.DCSGovernmentModule.IDocumentRegisterTaskObservers>("Observers", this);
              this._Observers.ValueChanged += (sender, e) => { this.ObserversChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Observers);
              this.SetObserversEventHandlers();
            }


    public DocumentRegisterTask()
    {
            this._WasRedirected = new global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?>("WasRedirected", this);
            this._WasRedirected.ValueChanged += (sender, e) => { this.WasRedirectedChangedHandler(); };
            this.AddProperty(this._WasRedirected);

            this.InitProcessingRuleNavigationProperty();

            this.InitLetterNavigationProperty();

            this.InitRequestNavigationProperty();

            this.InitRegistrarNavigationProperty();

            this.InitBusinessUnitNavigationProperty();








      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #endregion

    #region Workflow attachments
    public virtual global::GD.DCSGovernmentModule.IDocumentRegisterTaskDocumentGroupAttachments DocumentGroup
    {
      get
      {
        return new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskDocumentGroupAttachments(this);
      }
    }
    public virtual global::GD.DCSGovernmentModule.IDocumentRegisterTaskOtherGroupAttachments OtherGroup
    {
      get
      {
        return new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskOtherGroupAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).DocumentGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).OtherGroupCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).DocumentGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).OtherGroupAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).DocumentGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).OtherGroupDeleted(e);
        return;
      }

    }
    #endregion


  }
}

// ==================================================================
// DocumentRegisterTaskPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Client
{
  public class DocumentRegisterTaskPresenter<T> :
    global::Sungero.Workflow.Client.TaskPresenter<T>
    where T : class, global::GD.DCSGovernmentModule.IDocumentRegisterTask
  {
    #region Fields and properties




    #endregion

    #region Methods


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _ProcessingRuleCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter ProcessingRuleCollectionPresenter
              {
          get { return this._ProcessingRuleCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _LetterCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter LetterCollectionPresenter
              {
          get { return this._LetterCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _RequestCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter RequestCollectionPresenter
              {
          get { return this._RequestCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _RegistrarCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter RegistrarCollectionPresenter
              {
          get { return this._RegistrarCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _BusinessUnitCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter BusinessUnitCollectionPresenter
              {
          get { return this._BusinessUnitCollectionPresenter; }
        }



    #region Constructors

    private void Init()
    {
              this._ProcessKindCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.IProcessKind>(() => this.Entity.Id, typeof(T), "ProcessKind");

              this._AuthorCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.CoreEntities.IUser>(() => this.Entity, typeof(T), "Author");

              this._StartedByCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "StartedBy");

              this._ParentTaskCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(T), "ParentTask");

              this._ParentAssignmentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.IAssignmentBase>(() => this.Entity.Id, typeof(T), "ParentAssignment");

              this._MainTaskCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(T), "MainTask");

                  this._ProcessingRuleCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::DirRX.DCTSIntegration.IProcessingRuleBase>(global::System.Guid.Parse("f1d5c157-6887-4f36-92a5-30f96bced780"));
              this._ProcessingRuleCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::DirRX.DCTSIntegration.IProcessingRuleBase>(() => this.Entity.Id, typeof(T), "ProcessingRule");

                  this._LetterCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.RecordManagement.IIncomingLetter>(global::System.Guid.Parse("3f69a57f-eba1-4359-a0a1-c625dfd3e43b"));
              this._LetterCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.RecordManagement.IIncomingLetter>(() => this.Entity.Id, typeof(T), "Letter");

                  this._RequestCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::GD.CitizenRequests.IRequest>(global::System.Guid.Parse("5744d106-c7f4-4b73-9b5e-911f8b10a2e7"));
              this._RequestCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::GD.CitizenRequests.IRequest>(() => this.Entity.Id, typeof(T), "Request");

                  this._RegistrarCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IEmployee>(global::System.Guid.Parse("49c81de0-cbca-4a09-af66-8cd6c90224b1"));
              this._RegistrarCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Registrar");

                  this._BusinessUnitCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IBusinessUnit>(global::System.Guid.Parse("f255ca3d-0ddc-431a-85b2-444fe2a67528"));
              this._BusinessUnitCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IBusinessUnit>(() => this.Entity.Id, typeof(T), "BusinessUnit");


                        this._ObserversObserverCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IRecipient>(() => this.Entity.Id, typeof(GD.DCSGovernmentModule.IDocumentRegisterTaskObservers), "Observer");



    }

    public DocumentRegisterTaskPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// DocumentRegisterTaskCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Client
{
  public class DocumentRegisterTaskCollectionPresenter<T> : 
    global::Sungero.Workflow.Client.TaskCollectionPresenter<T>
    where T: class, global::GD.DCSGovernmentModule.IDocumentRegisterTask
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public DocumentRegisterTaskCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public DocumentRegisterTaskCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public DocumentRegisterTaskCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public DocumentRegisterTaskCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// DocumentRegisterTaskRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Client
{ 
  public class DocumentRegisterTaskRepositoryImplementer<T> : 
      global::Sungero.Workflow.Client.TaskRepositoryImplementer<T>,
      global::GD.DCSGovernmentModule.IDocumentRegisterTaskRepositoryImplementer<T>
      where T : global::GD.DCSGovernmentModule.IDocumentRegisterTask
    {
       public new global::GD.DCSGovernmentModule.IDocumentRegisterTaskAccessRights AccessRights
       {
          get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTaskAccessRights)base.AccessRights; }
       }

       public new global::GD.DCSGovernmentModule.IDocumentRegisterTaskInfo Info
       {
          get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTaskInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::GD.DCSGovernmentModule.Client.DocumentRegisterTaskTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// DocumentRegisterTaskAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Client
{
  public class DocumentRegisterTaskAccessRights : 
    Sungero.Workflow.Client.TaskAccessRights, GD.DCSGovernmentModule.IDocumentRegisterTaskAccessRights
  {

    public DocumentRegisterTaskAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class DocumentRegisterTaskTypeAccessRights : 
    Sungero.Workflow.Client.TaskTypeAccessRights, GD.DCSGovernmentModule.IDocumentRegisterTaskAccessRights
  {

    public DocumentRegisterTaskTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// DocumentRegisterTaskBlocksInfo.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Client
{
}
