
// ==================================================================
// RegistrationAssignment.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Client
{
  public class RegistrationAssignment :
    global::Sungero.Workflow.Client.Assignment, global::GD.DCSGovernmentModule.IRegistrationAssignment
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("9a576448-4a40-4dc6-8969-de3c210aec6a");

    public override global::System.Guid TypeGuid
    {
      get { return global::GD.DCSGovernmentModule.Client.RegistrationAssignment.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "GD.DCSGovernmentModule.IRegistrationAssignment, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Subject; }
        set { this.Subject = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Subject"; }
      }


    public new global::GD.DCSGovernmentModule.IRegistrationAssignmentState State
    {
      get
      {
        return (global::GD.DCSGovernmentModule.IRegistrationAssignmentState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::GD.DCSGovernmentModule.Shared.RegistrationAssignmentState(this);
    }

    public new global::GD.DCSGovernmentModule.IRegistrationAssignmentInfo Info
    {
      get
      {
        return (global::GD.DCSGovernmentModule.IRegistrationAssignmentInfo)base.Info;
      }
    }

    public new global::GD.DCSGovernmentModule.IRegistrationAssignmentAccessRights AccessRights
    {
      get
      {
        return (global::GD.DCSGovernmentModule.IRegistrationAssignmentAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::GD.DCSGovernmentModule.Client.RegistrationAssignmentAccessRights(this);
    }


        private static global::Sungero.Domain.Shared.EnumerationItems _ResultItems = new global::Sungero.Domain.Shared.EnumerationItems(
          global::Sungero.Workflow.Client.Assignment.ResultItems,
          typeof(global::GD.DCSGovernmentModule.RegistrationAssignment.Result),
          typeof(global::GD.DCSGovernmentModule.Client.RegistrationAssignment),
          "Result");

        public static new global::Sungero.Domain.Shared.EnumerationItems ResultItems
        {
          get { return global::GD.DCSGovernmentModule.Client.RegistrationAssignment._ResultItems; }
        }

        public override global::Sungero.Domain.Shared.EnumerationItems ResultAllowedItems
        {
          get { return global::GD.DCSGovernmentModule.Client.RegistrationAssignment.ResultItems; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Company.IEmployee> _Registrar;

              public virtual global::Sungero.Company.IEmployee Registrar
              {
              get
              {
                return this._Registrar.Value as global::Sungero.Company.IEmployee;
              }

              set
              {
                (this._Registrar as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Company.IBusinessUnit> _BusinessUnit;

              public virtual global::Sungero.Company.IBusinessUnit BusinessUnit
              {
              get
              {
                return this._BusinessUnit.Value as global::Sungero.Company.IBusinessUnit;
              }

              set
              {
                (this._BusinessUnit as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }










    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::GD.DCSGovernmentModule.Client.RegistrationAssignmentActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::GD.DCSGovernmentModule.Client.RegistrationAssignmentCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::GD.DCSGovernmentModule.Client.RegistrationAssignmentAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::GD.DCSGovernmentModule.Client.RegistrationAssignmentAnyChildEntityCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::GD.DCSGovernmentModule.Client.RegistrationAssignmentFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::GD.DCSGovernmentModule.Shared.RegistrationAssignmentFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::GD.DCSGovernmentModule.RegistrationAssignmentClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::GD.DCSGovernmentModule.RegistrationAssignmentSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void RegistrarChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.RegistrationAssignmentRegistrarChangedEventArgs(this.State.Properties.Registrar, this.Registrar, this);
     ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).RegistrarChanged(args);
    }

    protected void BusinessUnitChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.RegistrationAssignmentBusinessUnitChangedEventArgs(this.State.Properties.BusinessUnit, this.BusinessUnit, this);
     ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).BusinessUnitChanged(args);
    }



  protected global::Sungero.Company.IEmployee RegistrarValueInputHandler(global::Sungero.Company.IEmployee value)
  {
    var args = new global::GD.DCSGovernmentModule.Client.RegistrationAssignmentRegistrarValueInputEventArgs(this.Registrar, value, this, this.Info.Properties.Registrar);
    ((global::GD.DCSGovernmentModule.RegistrationAssignmentClientHandlers)this.Handlers).RegistrarValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Company.IBusinessUnit BusinessUnitValueInputHandler(global::Sungero.Company.IBusinessUnit value)
  {
    var args = new global::GD.DCSGovernmentModule.Client.RegistrationAssignmentBusinessUnitValueInputEventArgs(this.BusinessUnit, value, this, this.Info.Properties.BusinessUnit);
    ((global::GD.DCSGovernmentModule.RegistrationAssignmentClientHandlers)this.Handlers).BusinessUnitValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors








              protected virtual void InitRegistrarNavigationProperty()
              {
                this._Registrar = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Company.IEmployee>("Registrar", this);
                this._Registrar.ValueChanged += (sender, e) => { this.RegistrarChangedHandler(); };
                this.AddProperty(this._Registrar as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitBusinessUnitNavigationProperty()
              {
                this._BusinessUnit = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Company.IBusinessUnit>("BusinessUnit", this);
                this._BusinessUnit.ValueChanged += (sender, e) => { this.BusinessUnitChangedHandler(); };
                this.AddProperty(this._BusinessUnit as global::Sungero.Domain.Client.IProperty);
              }




    public RegistrationAssignment()
    {

            this.InitRegistrarNavigationProperty();

            this.InitBusinessUnitNavigationProperty();








      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #endregion

    #region Workflow attachments
    public virtual global::GD.DCSGovernmentModule.IRegistrationAssignmentDocumentGroupAttachments DocumentGroup
    {
      get
      {
        return new global::GD.DCSGovernmentModule.Shared.RegistrationAssignmentDocumentGroupAttachments(this);
      }
    }
    public virtual global::GD.DCSGovernmentModule.IRegistrationAssignmentOtherGroupAttachments OtherGroup
    {
      get
      {
        return new global::GD.DCSGovernmentModule.Shared.RegistrationAssignmentOtherGroupAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).DocumentGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).OtherGroupCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).DocumentGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).OtherGroupAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).DocumentGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).OtherGroupDeleted(e);
        return;
      }

    }
    #endregion


  }
}

// ==================================================================
// RegistrationAssignmentPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Client
{
  public class RegistrationAssignmentPresenter<T> :
    global::Sungero.Workflow.Client.AssignmentPresenter<T>
    where T : class, global::GD.DCSGovernmentModule.IRegistrationAssignment
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _ChangeLeadingDocumentCommand;

          public global::System.Windows.Input.ICommand ChangeLeadingDocumentCommand
          {
            get
            {
              if (this._ChangeLeadingDocumentCommand == null)
                  this._ChangeLeadingDocumentCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("ChangeLeadingDocument", this, this.ChangeLeadingDocument, this.CanChangeLeadingDocument) { IsEmptyParameterAllowed = true };
              return this._ChangeLeadingDocumentCommand;
            }
          }
          private global::System.Windows.Input.ICommand _RegisterCommand;

          public global::System.Windows.Input.ICommand RegisterCommand
          {
            get
            {
              if (this._RegisterCommand == null)
                  this._RegisterCommand = new global::Sungero.Workflow.Client.SingleAssignmentCommand<T>("Register", this, this.Register, this.CanRegister) { IsEmptyParameterAllowed = true };
              return this._RegisterCommand;
            }
          }
          private global::System.Windows.Input.ICommand _DeclineCommand;

          public global::System.Windows.Input.ICommand DeclineCommand
          {
            get
            {
              if (this._DeclineCommand == null)
                  this._DeclineCommand = new global::Sungero.Workflow.Client.SingleAssignmentCommand<T>("Decline", this, this.Decline, this.CanDecline) { IsEmptyParameterAllowed = true };
              return this._DeclineCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ToRegistrarCommand;

          public global::System.Windows.Input.ICommand ToRegistrarCommand
          {
            get
            {
              if (this._ToRegistrarCommand == null)
                  this._ToRegistrarCommand = new global::Sungero.Workflow.Client.SingleAssignmentCommand<T>("ToRegistrar", this, this.ToRegistrar, this.CanToRegistrar) { IsEmptyParameterAllowed = true };
              return this._ToRegistrarCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ToBusinessUnitCommand;

          public global::System.Windows.Input.ICommand ToBusinessUnitCommand
          {
            get
            {
              if (this._ToBusinessUnitCommand == null)
                  this._ToBusinessUnitCommand = new global::Sungero.Workflow.Client.SingleAssignmentCommand<T>("ToBusinessUnit", this, this.ToBusinessUnit, this.CanToBusinessUnit) { IsEmptyParameterAllowed = true };
              return this._ToBusinessUnitCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ToRequestCommand;

          public global::System.Windows.Input.ICommand ToRequestCommand
          {
            get
            {
              if (this._ToRequestCommand == null)
                  this._ToRequestCommand = new global::Sungero.Workflow.Client.SingleAssignmentCommand<T>("ToRequest", this, this.ToRequest, this.CanToRequest) { IsEmptyParameterAllowed = true };
              return this._ToRequestCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ToLetterCommand;

          public global::System.Windows.Input.ICommand ToLetterCommand
          {
            get
            {
              if (this._ToLetterCommand == null)
                  this._ToLetterCommand = new global::Sungero.Workflow.Client.SingleAssignmentCommand<T>("ToLetter", this, this.ToLetter, this.CanToLetter) { IsEmptyParameterAllowed = true };
              return this._ToLetterCommand;
            }
          }
          private global::System.Windows.Input.ICommand _RegistrationCommand;

          public global::System.Windows.Input.ICommand RegistrationCommand
          {
            get
            {
              if (this._RegistrationCommand == null)
                  this._RegistrationCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("Registration", this, this.Registration, this.CanRegistration) { IsEmptyParameterAllowed = true };
              return this._RegistrationCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanChangeLeadingDocument(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).CanChangeLeadingDocument(args);
              }

              private void ChangeLeadingDocument(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.ChangeLeadingDocument);
                ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).ChangeLeadingDocument(args);
              }
              private bool CanRegister(T entity)
              {
                var args = new global::Sungero.Workflow.Client.CanExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity);
                return ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).CanRegister(args);
              }

              private void Register(T entity)
              {
                var args = new global::Sungero.Workflow.Client.ExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, entity.Info.Actions.Register);
                ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).Register(args);
              }
              private bool CanDecline(T entity)
              {
                var args = new global::Sungero.Workflow.Client.CanExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity);
                return ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).CanDecline(args);
              }

              private void Decline(T entity)
              {
                var args = new global::Sungero.Workflow.Client.ExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, entity.Info.Actions.Decline);
                ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).Decline(args);
              }
              private bool CanToRegistrar(T entity)
              {
                var args = new global::Sungero.Workflow.Client.CanExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity);
                return ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).CanToRegistrar(args);
              }

              private void ToRegistrar(T entity)
              {
                var args = new global::Sungero.Workflow.Client.ExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, entity.Info.Actions.ToRegistrar);
                ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).ToRegistrar(args);
              }
              private bool CanToBusinessUnit(T entity)
              {
                var args = new global::Sungero.Workflow.Client.CanExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity);
                return ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).CanToBusinessUnit(args);
              }

              private void ToBusinessUnit(T entity)
              {
                var args = new global::Sungero.Workflow.Client.ExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, entity.Info.Actions.ToBusinessUnit);
                ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).ToBusinessUnit(args);
              }
              private bool CanToRequest(T entity)
              {
                var args = new global::Sungero.Workflow.Client.CanExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity);
                return ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).CanToRequest(args);
              }

              private void ToRequest(T entity)
              {
                var args = new global::Sungero.Workflow.Client.ExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, entity.Info.Actions.ToRequest);
                ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).ToRequest(args);
              }
              private bool CanToLetter(T entity)
              {
                var args = new global::Sungero.Workflow.Client.CanExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity);
                return ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).CanToLetter(args);
              }

              private void ToLetter(T entity)
              {
                var args = new global::Sungero.Workflow.Client.ExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, entity.Info.Actions.ToLetter);
                ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).ToLetter(args);
              }
              private bool CanRegistration(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).CanRegistration(args);
              }

              private void Registration(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.Registration);
                ((GD.DCSGovernmentModule.Client.RegistrationAssignmentActions)(entity as GD.DCSGovernmentModule.Client.RegistrationAssignment).ActionsHandlers).Registration(args);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _RegistrarCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter RegistrarCollectionPresenter
              {
          get { return this._RegistrarCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _BusinessUnitCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter BusinessUnitCollectionPresenter
              {
          get { return this._BusinessUnitCollectionPresenter; }
        }



    #region Constructors

    private void Init()
    {
              this._AuthorCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "Author");

              this._PerformerCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "Performer");

              this._TaskCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(T), "Task");

              this._MainTaskCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(T), "MainTask");

              this._CompletedByCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "CompletedBy");

                  this._RegistrarCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IEmployee>(global::System.Guid.Parse("d1994129-d3fd-4d2f-88f0-3635226a2aec"));
              this._RegistrarCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Registrar");

                  this._BusinessUnitCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IBusinessUnit>(global::System.Guid.Parse("c21a546a-81f2-4697-90de-aec634292910"));
              this._BusinessUnitCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Company.IBusinessUnit>(() => this.Entity, typeof(T), "BusinessUnit");


    }

    public RegistrationAssignmentPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// RegistrationAssignmentCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Client
{
  public class RegistrationAssignmentCollectionPresenter<T> : 
    global::Sungero.Workflow.Client.AssignmentCollectionPresenter<T>
    where T: class, global::GD.DCSGovernmentModule.IRegistrationAssignment
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public RegistrationAssignmentCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public RegistrationAssignmentCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public RegistrationAssignmentCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public RegistrationAssignmentCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// RegistrationAssignmentRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Client
{ 
  public class RegistrationAssignmentRepositoryImplementer<T> : 
      global::Sungero.Workflow.Client.AssignmentRepositoryImplementer<T>,
      global::GD.DCSGovernmentModule.IRegistrationAssignmentRepositoryImplementer<T>
      where T : global::GD.DCSGovernmentModule.IRegistrationAssignment
    {
       public new global::GD.DCSGovernmentModule.IRegistrationAssignmentAccessRights AccessRights
       {
          get { return (global::GD.DCSGovernmentModule.IRegistrationAssignmentAccessRights)base.AccessRights; }
       }

       public new global::GD.DCSGovernmentModule.IRegistrationAssignmentInfo Info
       {
          get { return (global::GD.DCSGovernmentModule.IRegistrationAssignmentInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::GD.DCSGovernmentModule.Client.RegistrationAssignmentTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// RegistrationAssignmentAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Client
{
  public class RegistrationAssignmentAccessRights : 
    Sungero.Workflow.Client.AssignmentAccessRights, GD.DCSGovernmentModule.IRegistrationAssignmentAccessRights
  {

    public RegistrationAssignmentAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class RegistrationAssignmentTypeAccessRights : 
    Sungero.Workflow.Client.AssignmentTypeAccessRights, GD.DCSGovernmentModule.IRegistrationAssignmentAccessRights
  {

    public RegistrationAssignmentTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// RegistrationAssignmentBlocksInfo.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Client
{
}
