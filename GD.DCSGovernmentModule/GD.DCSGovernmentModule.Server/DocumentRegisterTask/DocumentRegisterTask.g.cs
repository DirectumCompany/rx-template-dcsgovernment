
// ==================================================================
// DocumentRegisterTask.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
    public class DocumentRegisterTaskFilter<T> :
      global::Sungero.Workflow.Server.TaskFilter<T>
      where T : class, global::GD.DCSGovernmentModule.IDocumentRegisterTask
    {
      protected new global::GD.DCSGovernmentModule.IDocumentRegisterTaskFilterState Filter { get; private set; }

      private global::GD.DCSGovernmentModule.IDocumentRegisterTaskFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedPreFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedPreFilter(query);
      }

      public DocumentRegisterTaskFilter(global::GD.DCSGovernmentModule.IDocumentRegisterTaskFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected DocumentRegisterTaskFilter()
      {
      }
    }
    public class DocumentRegisterTaskSearchDialogModel : global::Sungero.Workflow.Server.TaskSearchDialogModel
        {
                  public override global::System.Int64? Id { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Importance { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Started { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> MaxDeadline { get; protected set; }




                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new DocumentRegisterTaskObserversModel Observers { get { return (DocumentRegisterTaskObserversModel)base.Observers; } protected set { base.Observers = value; } }

        }

      public class DocumentRegisterTaskObserversModel : global::Sungero.Workflow.Server.TaskObserversModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int64? Id { get; protected set; }




         }




  public class DocumentRegisterTaskFilterForProcessingRule<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::DirRX.DCTSIntegration.IProcessingRuleBase
    where TSourceEntity : class, global::GD.DCSGovernmentModule.IDocumentRegisterTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.DocumentRegisterTaskProcessingRulePropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("ProcessingRuleFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.DocumentRegisterTaskProcessingRulePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ProcessingRuleFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DocumentRegisterTaskFilterForProcessingRule(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DocumentRegisterTaskSearchFilterForProcessingRule<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::DirRX.DCTSIntegration.IProcessingRuleBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.DocumentRegisterTaskProcessingRuleSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("ProcessingRuleSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.DocumentRegisterTaskProcessingRuleSearchPropertyFilteringServerHandler<TQueryEntity>().ProcessingRuleSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DocumentRegisterTaskSearchFilterForProcessingRule(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DocumentRegisterTaskFilterForLetter<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.RecordManagement.IIncomingLetter
    where TSourceEntity : class, global::GD.DCSGovernmentModule.IDocumentRegisterTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.DocumentRegisterTaskLetterPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("LetterFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.DocumentRegisterTaskLetterPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).LetterFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DocumentRegisterTaskFilterForLetter(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DocumentRegisterTaskSearchFilterForLetter<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.RecordManagement.IIncomingLetter
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.DocumentRegisterTaskLetterSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("LetterSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.DocumentRegisterTaskLetterSearchPropertyFilteringServerHandler<TQueryEntity>().LetterSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DocumentRegisterTaskSearchFilterForLetter(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DocumentRegisterTaskFilterForRequest<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::GD.CitizenRequests.IRequest
    where TSourceEntity : class, global::GD.DCSGovernmentModule.IDocumentRegisterTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.DocumentRegisterTaskRequestPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("RequestFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.DocumentRegisterTaskRequestPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).RequestFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DocumentRegisterTaskFilterForRequest(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DocumentRegisterTaskSearchFilterForRequest<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::GD.CitizenRequests.IRequest
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.DocumentRegisterTaskRequestSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("RequestSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.DocumentRegisterTaskRequestSearchPropertyFilteringServerHandler<TQueryEntity>().RequestSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DocumentRegisterTaskSearchFilterForRequest(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DocumentRegisterTaskFilterForRegistrar<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::GD.DCSGovernmentModule.IDocumentRegisterTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.DocumentRegisterTaskRegistrarPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("RegistrarFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.DocumentRegisterTaskRegistrarPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).RegistrarFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DocumentRegisterTaskFilterForRegistrar(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DocumentRegisterTaskSearchFilterForRegistrar<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.DocumentRegisterTaskRegistrarSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("RegistrarSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.DocumentRegisterTaskRegistrarSearchPropertyFilteringServerHandler<TQueryEntity>().RegistrarSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DocumentRegisterTaskSearchFilterForRegistrar(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DocumentRegisterTaskFilterForBusinessUnit<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IBusinessUnit
    where TSourceEntity : class, global::GD.DCSGovernmentModule.IDocumentRegisterTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.DocumentRegisterTaskBusinessUnitPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("BusinessUnitFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.DocumentRegisterTaskBusinessUnitPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).BusinessUnitFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DocumentRegisterTaskFilterForBusinessUnit(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DocumentRegisterTaskSearchFilterForBusinessUnit<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Company.IBusinessUnit
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.DocumentRegisterTaskBusinessUnitSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("BusinessUnitSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.DocumentRegisterTaskBusinessUnitSearchPropertyFilteringServerHandler<TQueryEntity>().BusinessUnitSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DocumentRegisterTaskSearchFilterForBusinessUnit(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskFilter<global::GD.DCSGovernmentModule.IDocumentRegisterTask>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskFilterForProcessingRule<global::DirRX.DCTSIntegration.IProcessingRuleBase, global::GD.DCSGovernmentModule.IDocumentRegisterTask>), "ProcessingRule")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskSearchFilterForProcessingRule<global::DirRX.DCTSIntegration.IProcessingRuleBase>), "ProcessingRule")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskFilterForLetter<global::Sungero.RecordManagement.IIncomingLetter, global::GD.DCSGovernmentModule.IDocumentRegisterTask>), "Letter")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskSearchFilterForLetter<global::Sungero.RecordManagement.IIncomingLetter>), "Letter")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskFilterForRequest<global::GD.CitizenRequests.IRequest, global::GD.DCSGovernmentModule.IDocumentRegisterTask>), "Request")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskSearchFilterForRequest<global::GD.CitizenRequests.IRequest>), "Request")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskFilterForRegistrar<global::Sungero.Company.IEmployee, global::GD.DCSGovernmentModule.IDocumentRegisterTask>), "Registrar")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskSearchFilterForRegistrar<global::Sungero.CoreEntities.IRecipient>), "Registrar")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskFilterForBusinessUnit<global::Sungero.Company.IBusinessUnit, global::GD.DCSGovernmentModule.IDocumentRegisterTask>), "BusinessUnit")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskSearchFilterForBusinessUnit<global::Sungero.Company.IBusinessUnit>), "BusinessUnit")]


  public class DocumentRegisterTask :
    global::Sungero.Workflow.Server.Task, global::GD.DCSGovernmentModule.IDocumentRegisterTask, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("d574cc38-2354-46fa-85d6-686c525f182b");

    public override global::System.Guid TypeGuid
    {
      get { return global::GD.DCSGovernmentModule.Server.DocumentRegisterTask.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "GD.DCSGovernmentModule.IDocumentRegisterTask, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Subject; }
      set { this.Subject = value; }
    }

    public new virtual global::GD.DCSGovernmentModule.IDocumentRegisterTaskState State
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTaskState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskState(this);
    }

    public new virtual global::GD.DCSGovernmentModule.IDocumentRegisterTaskInfo Info
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTaskInfo)base.Info; }
    }

    public new virtual global::GD.DCSGovernmentModule.IDocumentRegisterTaskAccessRights AccessRights
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTaskAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::GD.DCSGovernmentModule.DocumentRegisterTaskServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::GD.DCSGovernmentModule.DocumentRegisterTaskSharedHandlers(this);
    }

    private global::System.Boolean? _WasRedirected;
    public virtual global::System.Boolean? WasRedirected
    {
      get
      {
        return this._WasRedirected;
      }

      set
      {
        this.SetPropertyValue("WasRedirected", this._WasRedirected, value, (propertyValue) => { this._WasRedirected = propertyValue; }, this.WasRedirectedChangedHandler);
      }
    }







    private global::DirRX.DCTSIntegration.IProcessingRuleBase _ProcessingRule;
    public virtual global::DirRX.DCTSIntegration.IProcessingRuleBase ProcessingRule
    {
      get
      {
        return this._ProcessingRule;
      }

      set
      {
        this.SetPropertyValue("ProcessingRule", this._ProcessingRule, value, (propertyValue) => { this._ProcessingRule = propertyValue; }, this.ProcessingRuleChangedHandler);
      }
    }
    private global::Sungero.RecordManagement.IIncomingLetter _Letter;
    public virtual global::Sungero.RecordManagement.IIncomingLetter Letter
    {
      get
      {
        return this._Letter;
      }

      set
      {
        this.SetPropertyValue("Letter", this._Letter, value, (propertyValue) => { this._Letter = propertyValue; }, this.LetterChangedHandler);
      }
    }
    private global::GD.CitizenRequests.IRequest _Request;
    public virtual global::GD.CitizenRequests.IRequest Request
    {
      get
      {
        return this._Request;
      }

      set
      {
        this.SetPropertyValue("Request", this._Request, value, (propertyValue) => { this._Request = propertyValue; }, this.RequestChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _Registrar;
    public virtual global::Sungero.Company.IEmployee Registrar
    {
      get
      {
        return this._Registrar;
      }

      set
      {
        this.SetPropertyValue("Registrar", this._Registrar, value, (propertyValue) => { this._Registrar = propertyValue; }, this.RegistrarChangedHandler);
      }
    }
    private global::Sungero.Company.IBusinessUnit _BusinessUnit;
    public virtual global::Sungero.Company.IBusinessUnit BusinessUnit
    {
      get
      {
        return this._BusinessUnit;
      }

      set
      {
        this.SetPropertyValue("BusinessUnit", this._BusinessUnit, value, (propertyValue) => { this._BusinessUnit = propertyValue; }, this.BusinessUnitChangedHandler);
      }
    }



    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Workflow.ITaskObservers> CreateObserversCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::GD.DCSGovernmentModule.IDocumentRegisterTaskObservers>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      var instance = Sungero.Metadata.Services.AppliedTypesManager.CreateInstance("GD.DCSGovernmentModule.DocumentRegisterTaskCreatingFromServerHandler", new object[] { (global::GD.DCSGovernmentModule.IDocumentRegisterTask)entitySource, this.Info });
      if (instance != null)
        return (global::Sungero.Domain.Shared.EntityCreatingFromServerHandler)instance;

      return new global::GD.DCSGovernmentModule.DocumentRegisterTaskCreatingFromServerHandler((global::GD.DCSGovernmentModule.IDocumentRegisterTask)entitySource, this.Info);
    }

    #region Framework events

    protected void ProcessingRuleChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskProcessingRuleChangedEventArgs(this.State.Properties.ProcessingRule, this.ProcessingRule, this);
     ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).ProcessingRuleChanged(args);
    }

    protected void LetterChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskLetterChangedEventArgs(this.State.Properties.Letter, this.Letter, this);
     ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).LetterChanged(args);
    }

    protected void RequestChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskRequestChangedEventArgs(this.State.Properties.Request, this.Request, this);
     ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).RequestChanged(args);
    }

    protected void RegistrarChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskRegistrarChangedEventArgs(this.State.Properties.Registrar, this.Registrar, this);
     ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).RegistrarChanged(args);
    }

    protected void BusinessUnitChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskBusinessUnitChangedEventArgs(this.State.Properties.BusinessUnit, this.BusinessUnit, this);
     ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).BusinessUnitChanged(args);
    }

    protected void WasRedirectedChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.WasRedirected, this.WasRedirected, this);
     ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).WasRedirectedChanged(args);
    }




    #endregion


    public DocumentRegisterTask()
    {
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #region Workflow attachments
    public virtual global::GD.DCSGovernmentModule.IDocumentRegisterTaskDocumentGroupAttachments DocumentGroup
    {
      get
      {
        return new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskDocumentGroupAttachments(this);
      }
    }
    public virtual global::GD.DCSGovernmentModule.IDocumentRegisterTaskOtherGroupAttachments OtherGroup
    {
      get
      {
        return new global::GD.DCSGovernmentModule.Shared.DocumentRegisterTaskOtherGroupAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).DocumentGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).OtherGroupCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).DocumentGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).OtherGroupAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).DocumentGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::GD.DCSGovernmentModule.IDocumentRegisterTaskSharedHandlers)this.SharedHandlers).OtherGroupDeleted(e);
        return;
      }

    }
    #endregion


  }
}

// ==================================================================
// DocumentRegisterTaskHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule
{
  public partial class DocumentRegisterTaskProcessingRulePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::DirRX.DCTSIntegration.IProcessingRuleBase
  {
    private global::GD.DCSGovernmentModule.IDocumentRegisterTask _obj
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> ProcessingRuleFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public DocumentRegisterTaskProcessingRulePropertyFilteringServerHandler(global::GD.DCSGovernmentModule.IDocumentRegisterTask entity)
      : base(entity)
    {
    }
  }

  public partial class DocumentRegisterTaskProcessingRuleSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::DirRX.DCTSIntegration.IProcessingRuleBase
  {

    public virtual global::System.Linq.IQueryable<T> ProcessingRuleSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public DocumentRegisterTaskProcessingRuleSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class DocumentRegisterTaskLetterPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.RecordManagement.IIncomingLetter
  {
    private global::GD.DCSGovernmentModule.IDocumentRegisterTask _obj
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> LetterFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public DocumentRegisterTaskLetterPropertyFilteringServerHandler(global::GD.DCSGovernmentModule.IDocumentRegisterTask entity)
      : base(entity)
    {
    }
  }

  public partial class DocumentRegisterTaskLetterSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.RecordManagement.IIncomingLetter
  {

    public virtual global::System.Linq.IQueryable<T> LetterSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public DocumentRegisterTaskLetterSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class DocumentRegisterTaskRequestPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::GD.CitizenRequests.IRequest
  {
    private global::GD.DCSGovernmentModule.IDocumentRegisterTask _obj
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> RequestFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public DocumentRegisterTaskRequestPropertyFilteringServerHandler(global::GD.DCSGovernmentModule.IDocumentRegisterTask entity)
      : base(entity)
    {
    }
  }

  public partial class DocumentRegisterTaskRequestSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::GD.CitizenRequests.IRequest
  {

    public virtual global::System.Linq.IQueryable<T> RequestSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public DocumentRegisterTaskRequestSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class DocumentRegisterTaskRegistrarPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::GD.DCSGovernmentModule.IDocumentRegisterTask _obj
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> RegistrarFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public DocumentRegisterTaskRegistrarPropertyFilteringServerHandler(global::GD.DCSGovernmentModule.IDocumentRegisterTask entity)
      : base(entity)
    {
    }
  }

  public partial class DocumentRegisterTaskRegistrarSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> RegistrarSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public DocumentRegisterTaskRegistrarSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class DocumentRegisterTaskBusinessUnitPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IBusinessUnit
  {
    private global::GD.DCSGovernmentModule.IDocumentRegisterTask _obj
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> BusinessUnitFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public DocumentRegisterTaskBusinessUnitPropertyFilteringServerHandler(global::GD.DCSGovernmentModule.IDocumentRegisterTask entity)
      : base(entity)
    {
    }
  }

  public partial class DocumentRegisterTaskBusinessUnitSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IBusinessUnit
  {

    public virtual global::System.Linq.IQueryable<T> BusinessUnitSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public DocumentRegisterTaskBusinessUnitSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class DocumentRegisterTaskFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::GD.DCSGovernmentModule.IDocumentRegisterTask
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::GD.DCSGovernmentModule.IDocumentRegisterTaskFilterState Filter { get; private set; }

    private global::GD.DCSGovernmentModule.IDocumentRegisterTaskFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public DocumentRegisterTaskFilteringServerHandler(global::GD.DCSGovernmentModule.IDocumentRegisterTaskFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected DocumentRegisterTaskFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      return query;
    }


  }

  public partial class DocumentRegisterTaskSearchDialogServerHandler : global::Sungero.Workflow.TaskSearchDialogServerHandler
   {
     private global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskSearchDialogModel _dialog
     {
       get
       {
         return (global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskSearchDialogModel)this.Dialog;
       }
     }

     public DocumentRegisterTaskSearchDialogServerHandler(global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class DocumentRegisterTaskServerHandlers : global::Sungero.Workflow.TaskServerHandlers
  {
    private global::GD.DCSGovernmentModule.IDocumentRegisterTask _obj
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTask)this.Entity; }
    }

    public DocumentRegisterTaskServerHandlers(global::GD.DCSGovernmentModule.IDocumentRegisterTask entity)
      : base(entity)
    {
    }
  }

  public partial class DocumentRegisterTaskCreatingFromServerHandler : global::Sungero.Workflow.TaskCreatingFromServerHandler
  {
    private global::GD.DCSGovernmentModule.IDocumentRegisterTask _source
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTask)this.Source; }
    }

    private global::GD.DCSGovernmentModule.IDocumentRegisterTaskInfo _info
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTaskInfo)this._Info; }
    }

    public DocumentRegisterTaskCreatingFromServerHandler(global::GD.DCSGovernmentModule.IDocumentRegisterTask source, global::GD.DCSGovernmentModule.IDocumentRegisterTaskInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// DocumentRegisterTaskEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
}

// ==================================================================
// DocumentRegisterTaskAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
  public class DocumentRegisterTaskAccessRights : 
    Sungero.Workflow.Server.TaskAccessRights, GD.DCSGovernmentModule.IDocumentRegisterTaskAccessRights
  {

    public DocumentRegisterTaskAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class DocumentRegisterTaskTypeAccessRights : 
    Sungero.Workflow.Server.TaskTypeAccessRights, GD.DCSGovernmentModule.IDocumentRegisterTaskAccessRights
  {

    public DocumentRegisterTaskTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// DocumentRegisterTaskRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
    public class DocumentRegisterTaskRepositoryImplementer<T> : 
      global::Sungero.Workflow.Server.TaskRepositoryImplementer<T>,
      global::GD.DCSGovernmentModule.IDocumentRegisterTaskRepositoryImplementer<T>
      where T : global::GD.DCSGovernmentModule.IDocumentRegisterTask 
    {
       public new global::GD.DCSGovernmentModule.IDocumentRegisterTaskAccessRights AccessRights
       {
          get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTaskAccessRights)base.AccessRights; }
       }

       public new global::GD.DCSGovernmentModule.IDocumentRegisterTaskInfo Info
       {
          get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTaskInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// DocumentRegisterTaskPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
}

// ==================================================================
// DocumentRegisterTaskServerFunctions.g.cs
// ==================================================================

namespace GD.DCSGovernmentModule.Server
{
  public partial class DocumentRegisterTaskFunctions : global::Sungero.Workflow.Server.TaskFunctions
  {
    private global::GD.DCSGovernmentModule.IDocumentRegisterTask _obj
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTask)this.Entity; }
    }

    public DocumentRegisterTaskFunctions(global::GD.DCSGovernmentModule.IDocumentRegisterTask entity) : base(entity) { }
  }
}

// ==================================================================
// DocumentRegisterTaskFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Functions
{
  internal static class DocumentRegisterTask
  {
    /// <redirect project="GD.DCSGovernmentModule.Server" type="GD.DCSGovernmentModule.Server.DocumentRegisterTaskFunctions" />
    internal static  void ReformRequestToLetter(global::GD.DCSGovernmentModule.IDocumentRegisterTask documentRegisterTask)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)documentRegisterTask).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("ReformRequestToLetter", new System.Type[] {  });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="GD.DCSGovernmentModule.Server" type="GD.DCSGovernmentModule.Server.DocumentRegisterTaskFunctions" />
    internal static  void ReformLetterToRequest(global::GD.DCSGovernmentModule.IDocumentRegisterTask documentRegisterTask)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)documentRegisterTask).FunctionsContainer.ServerFunctions;
      var __funcMethod = __functions.GetType().GetMethod("ReformLetterToRequest", new System.Type[] {  });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }

  }
}

// ==================================================================
// DocumentRegisterTaskServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
  public class DocumentRegisterTaskServerPublicFunctions : global::GD.DCSGovernmentModule.Server.IDocumentRegisterTaskServerPublicFunctions
  {
  }
}

// ==================================================================
// DocumentRegisterTaskQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Queries
{
  public class DocumentRegisterTask
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("GD.DCSGovernmentModule.Server.DocumentRegisterTask.DocumentRegisterTaskQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// DocumentRegisterTaskBlock.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
  public class DocumentRegisterTaskArguments: global::Sungero.Workflow.Server.Route.TaskStartEventArguments<DocumentRegisterTaskBlock, global::Sungero.Workflow.TaskBlock>
  {
    public DocumentRegisterTaskArguments(DocumentRegisterTaskBlock block) : base(block) { }
  }

  public class DocumentRegisterTaskEndBlockEventArguments: global::Sungero.Workflow.Server.Route.TaskEndBlockEventArguments<DocumentRegisterTaskBlock, global::Sungero.Workflow.TaskBlock, GD.DCSGovernmentModule.IDocumentRegisterTask> 
  {
    public DocumentRegisterTaskEndBlockEventArguments(DocumentRegisterTaskBlock block) : base(block) { }
  }

  public partial class DocumentRegisterTaskBlock : global::Sungero.Workflow.Blocks.TaskBlockWrapper<global::Sungero.Workflow.TaskBlock>    
  {
    public virtual global::System.Boolean? WasRedirected
    {
      get { return this.GetCustomProperty<global::System.Boolean?>("WasRedirected"); }
      set { this.SetCustomProperty("WasRedirected", value); }
    }

    public virtual global::DirRX.DCTSIntegration.IProcessingRuleBase ProcessingRule
    {
      get { return this.GetCustomNavigationProperty<global::DirRX.DCTSIntegration.IProcessingRuleBase>("ProcessingRule"); }
      set { this.SetCustomNavigationProperty("ProcessingRule", value); }
    }
    public virtual global::Sungero.RecordManagement.IIncomingLetter Letter
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.RecordManagement.IIncomingLetter>("Letter"); }
      set { this.SetCustomNavigationProperty("Letter", value); }
    }
    public virtual global::GD.CitizenRequests.IRequest Request
    {
      get { return this.GetCustomNavigationProperty<global::GD.CitizenRequests.IRequest>("Request"); }
      set { this.SetCustomNavigationProperty("Request", value); }
    }
    public virtual global::Sungero.Company.IEmployee Registrar
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IEmployee>("Registrar"); }
      set { this.SetCustomNavigationProperty("Registrar", value); }
    }
    public virtual global::Sungero.Company.IBusinessUnit BusinessUnit
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IBusinessUnit>("BusinessUnit"); }
      set { this.SetCustomNavigationProperty("BusinessUnit", value); }
    }




    public DocumentRegisterTaskBlock(global::Sungero.Workflow.TaskBlock block) : base(block) { }
  }
}

// ==================================================================
// DocumentRegisterTaskChildWrappers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
}

// ==================================================================
// DocumentRegisterTaskRouteHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
  public partial class DocumentRegisterTaskRouteHandlers{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected global::Sungero.Workflow.ITask Task { get; private set; }

    private global::GD.DCSGovernmentModule.IDocumentRegisterTask _obj
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTask)this.Task; }
    }


              public virtual void StartReviewAssignment2(Sungero.Workflow.IReviewAssignment reviewAssignment)
              {
                
              }


    protected readonly int _schemeVersion;

    public DocumentRegisterTaskRouteHandlers(global::GD.DCSGovernmentModule.IDocumentRegisterTask task, int schemeVersion) 
    {
      this.Task = task;
      this._schemeVersion = schemeVersion;
    }


    [global::System.ObsoleteAttribute("Необходимо использовать LayerSchemeVersions")]
    private static class SchemeVersions
    {
      public static readonly int V1 = 1;
}

    }
}

// ==================================================================
// DocumentRegisterTaskBlockHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server.DocumentRegisterTaskBlocks
{
  public class RegistrationAssignmentBlockOutProperties
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected global::Sungero.Workflow.Blocks.AssignmentBlockWrapper<global::Sungero.Workflow.AssignmentBlock> Block { get; set; }

    public RegistrationAssignmentBlockOutProperties(RegistrationAssignmentBlock block) 
    {
      this.Block = block;
    }
  }

  public partial class RegistrationAssignmentBlock :  global::Sungero.Workflow.Blocks.AssignmentBlockWrapper<global::Sungero.Workflow.AssignmentBlock> {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    private global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskBlocks.RegistrationAssignmentBlockOutProperties _outProps;

    /// <summary>
    /// Output properties.
    /// </summary>
    public  global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskBlocks.RegistrationAssignmentBlockOutProperties OutProperties
    {
      get { return (global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskBlocks.RegistrationAssignmentBlockOutProperties)this._outProps; }
    }

    public RegistrationAssignmentBlock(global::Sungero.Workflow.AssignmentBlock block) : base(block)
    {
      this._outProps = new RegistrationAssignmentBlockOutProperties(this);
    }
  }

  public partial class RegistrationAssignmentBlockHandlers 
  {

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected global::Sungero.Workflow.Blocks.AssignmentBlockWrapper<global::Sungero.Workflow.AssignmentBlock> Block { get; set; }

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected global::Sungero.Workflow.ITask Task { get; private set; }

    private global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskBlocks.RegistrationAssignmentBlock _block
    {
      get { return (global::GD.DCSGovernmentModule.Server.DocumentRegisterTaskBlocks.RegistrationAssignmentBlock)this.Block; }
    }

    private global::GD.DCSGovernmentModule.IDocumentRegisterTask _obj
    {
      get { return (global::GD.DCSGovernmentModule.IDocumentRegisterTask)this.Task; }
    }

    public virtual void RegistrationAssignmentBlockStartAssignment(GD.DCSGovernmentModule.IRegistrationAssignment assignment)
    {
    }





    public RegistrationAssignmentBlockHandlers(global::Sungero.Workflow.AssignmentBlock block, global::GD.DCSGovernmentModule.IDocumentRegisterTask task)
    {
      this.Block = new RegistrationAssignmentBlock(block);
      this.Task = task;
    }
  }
}

// ==================================================================
// DocumentRegisterTaskBlocksInfo.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
}
