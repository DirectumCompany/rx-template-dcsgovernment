
// ==================================================================
// RegistrationAssignment.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
    public class RegistrationAssignmentFilter<T> :
      global::Sungero.Workflow.Server.AssignmentFilter<T>
      where T : class, global::GD.DCSGovernmentModule.IRegistrationAssignment
    {
      protected new global::GD.DCSGovernmentModule.IRegistrationAssignmentFilterState Filter { get; private set; }

      private global::GD.DCSGovernmentModule.IRegistrationAssignmentFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public RegistrationAssignmentFilter(global::GD.DCSGovernmentModule.IRegistrationAssignmentFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected RegistrationAssignmentFilter()
      {
      }
    }
    public class RegistrationAssignmentSearchDialogModel : global::Sungero.Workflow.Server.AssignmentSearchDialogModel
        {
                  public override global::System.Int64? Id { get; protected set; }
                  public override global::System.String Subject { get; protected set; }
                  public override global::System.Boolean? HasSubtasksInProcess { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Performer { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Importance { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Deadline { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Result { get; protected set; }




        }




  public class RegistrationAssignmentFilterForRegistrar<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::GD.DCSGovernmentModule.IRegistrationAssignment
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.RegistrationAssignmentRegistrarPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("RegistrarFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.RegistrationAssignmentRegistrarPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).RegistrarFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public RegistrationAssignmentFilterForRegistrar(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class RegistrationAssignmentSearchFilterForRegistrar<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.RegistrationAssignmentRegistrarSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("RegistrarSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.RegistrationAssignmentRegistrarSearchPropertyFilteringServerHandler<TQueryEntity>().RegistrarSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public RegistrationAssignmentSearchFilterForRegistrar(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class RegistrationAssignmentFilterForBusinessUnit<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IBusinessUnit
    where TSourceEntity : class, global::GD.DCSGovernmentModule.IRegistrationAssignment
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.RegistrationAssignmentBusinessUnitPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("BusinessUnitFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.RegistrationAssignmentBusinessUnitPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).BusinessUnitFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public RegistrationAssignmentFilterForBusinessUnit(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class RegistrationAssignmentSearchFilterForBusinessUnit<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Company.IBusinessUnit
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("GD.DCSGovernmentModule.RegistrationAssignmentBusinessUnitSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("BusinessUnitSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::GD.DCSGovernmentModule.RegistrationAssignmentBusinessUnitSearchPropertyFilteringServerHandler<TQueryEntity>().BusinessUnitSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public RegistrationAssignmentSearchFilterForBusinessUnit(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::GD.DCSGovernmentModule.Server.RegistrationAssignmentFilter<global::GD.DCSGovernmentModule.IRegistrationAssignment>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.RegistrationAssignmentFilterForRegistrar<global::Sungero.Company.IEmployee, global::GD.DCSGovernmentModule.IRegistrationAssignment>), "Registrar")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.RegistrationAssignmentSearchFilterForRegistrar<global::Sungero.CoreEntities.IRecipient>), "Registrar")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.RegistrationAssignmentFilterForBusinessUnit<global::Sungero.Company.IBusinessUnit, global::GD.DCSGovernmentModule.IRegistrationAssignment>), "BusinessUnit")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::GD.DCSGovernmentModule.Server.RegistrationAssignmentSearchFilterForBusinessUnit<global::Sungero.Company.IBusinessUnit>), "BusinessUnit")]


  public class RegistrationAssignment :
    global::Sungero.Workflow.Server.Assignment, global::GD.DCSGovernmentModule.IRegistrationAssignment, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("9a576448-4a40-4dc6-8969-de3c210aec6a");

    public override global::System.Guid TypeGuid
    {
      get { return global::GD.DCSGovernmentModule.Server.RegistrationAssignment.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "GD.DCSGovernmentModule.IRegistrationAssignment, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Subject; }
      set { this.Subject = value; }
    }

    public new virtual global::GD.DCSGovernmentModule.IRegistrationAssignmentState State
    {
      get { return (global::GD.DCSGovernmentModule.IRegistrationAssignmentState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::GD.DCSGovernmentModule.Shared.RegistrationAssignmentState(this);
    }

    public new virtual global::GD.DCSGovernmentModule.IRegistrationAssignmentInfo Info
    {
      get { return (global::GD.DCSGovernmentModule.IRegistrationAssignmentInfo)base.Info; }
    }

    public new virtual global::GD.DCSGovernmentModule.IRegistrationAssignmentAccessRights AccessRights
    {
      get { return (global::GD.DCSGovernmentModule.IRegistrationAssignmentAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::GD.DCSGovernmentModule.Server.RegistrationAssignmentAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::GD.DCSGovernmentModule.Server.RegistrationAssignmentFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::GD.DCSGovernmentModule.Shared.RegistrationAssignmentFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::GD.DCSGovernmentModule.RegistrationAssignmentServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::GD.DCSGovernmentModule.RegistrationAssignmentSharedHandlers(this);
    }






    private static global::Sungero.Domain.Shared.EnumerationItems _ResultItems = new global::Sungero.Domain.Shared.EnumerationItems(
      global::Sungero.Workflow.Server.Assignment.ResultItems,
      typeof(global::GD.DCSGovernmentModule.RegistrationAssignment.Result),
      typeof(global::GD.DCSGovernmentModule.Server.RegistrationAssignment),
      "Result");

    public static new global::Sungero.Domain.Shared.EnumerationItems ResultItems
    {
      get { return global::GD.DCSGovernmentModule.Server.RegistrationAssignment._ResultItems; }
    }

    public override global::Sungero.Domain.Shared.EnumerationItems ResultAllowedItems
    {
      get { return global::GD.DCSGovernmentModule.Server.RegistrationAssignment.ResultItems; }
    }



    private global::Sungero.Company.IEmployee _Registrar;
    public virtual global::Sungero.Company.IEmployee Registrar
    {
      get
      {
        return this._Registrar;
      }

      set
      {
        this.SetPropertyValue("Registrar", this._Registrar, value, (propertyValue) => { this._Registrar = propertyValue; }, this.RegistrarChangedHandler);
      }
    }
    private global::Sungero.Company.IBusinessUnit _BusinessUnit;
    public virtual global::Sungero.Company.IBusinessUnit BusinessUnit
    {
      get
      {
        return this._BusinessUnit;
      }

      set
      {
        this.SetPropertyValue("BusinessUnit", this._BusinessUnit, value, (propertyValue) => { this._BusinessUnit = propertyValue; }, this.BusinessUnitChangedHandler);
      }
    }




    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      var instance = Sungero.Metadata.Services.AppliedTypesManager.CreateInstance("GD.DCSGovernmentModule.RegistrationAssignmentCreatingFromServerHandler", new object[] { (global::GD.DCSGovernmentModule.IRegistrationAssignment)entitySource, this.Info });
      if (instance != null)
        return (global::Sungero.Domain.Shared.EntityCreatingFromServerHandler)instance;

      return new global::GD.DCSGovernmentModule.RegistrationAssignmentCreatingFromServerHandler((global::GD.DCSGovernmentModule.IRegistrationAssignment)entitySource, this.Info);
    }

    #region Framework events

    protected void RegistrarChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.RegistrationAssignmentRegistrarChangedEventArgs(this.State.Properties.Registrar, this.Registrar, this);
     ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).RegistrarChanged(args);
    }

    protected void BusinessUnitChangedHandler()
    {
      var args = new global::GD.DCSGovernmentModule.Shared.RegistrationAssignmentBusinessUnitChangedEventArgs(this.State.Properties.BusinessUnit, this.BusinessUnit, this);
     ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).BusinessUnitChanged(args);
    }



    #endregion


    public RegistrationAssignment()
    {
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #region Workflow attachments
    public virtual global::GD.DCSGovernmentModule.IRegistrationAssignmentDocumentGroupAttachments DocumentGroup
    {
      get
      {
        return new global::GD.DCSGovernmentModule.Shared.RegistrationAssignmentDocumentGroupAttachments(this);
      }
    }
    public virtual global::GD.DCSGovernmentModule.IRegistrationAssignmentOtherGroupAttachments OtherGroup
    {
      get
      {
        return new global::GD.DCSGovernmentModule.Shared.RegistrationAssignmentOtherGroupAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).DocumentGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).OtherGroupCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).DocumentGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).OtherGroupAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).DocumentGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::GD.DCSGovernmentModule.IRegistrationAssignmentSharedHandlers)this.SharedHandlers).OtherGroupDeleted(e);
        return;
      }

    }
    #endregion


  }
}

// ==================================================================
// RegistrationAssignmentHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule
{
  public partial class RegistrationAssignmentRegistrarPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::GD.DCSGovernmentModule.IRegistrationAssignment _obj
    {
      get { return (global::GD.DCSGovernmentModule.IRegistrationAssignment)this.Entity; }
    }

    public RegistrationAssignmentRegistrarPropertyFilteringServerHandler(global::GD.DCSGovernmentModule.IRegistrationAssignment entity)
      : base(entity)
    {
    }
  }

  public partial class RegistrationAssignmentRegistrarSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> RegistrarSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public RegistrationAssignmentRegistrarSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class RegistrationAssignmentBusinessUnitPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IBusinessUnit
  {
    private global::GD.DCSGovernmentModule.IRegistrationAssignment _obj
    {
      get { return (global::GD.DCSGovernmentModule.IRegistrationAssignment)this.Entity; }
    }

    public RegistrationAssignmentBusinessUnitPropertyFilteringServerHandler(global::GD.DCSGovernmentModule.IRegistrationAssignment entity)
      : base(entity)
    {
    }
  }

  public partial class RegistrationAssignmentBusinessUnitSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IBusinessUnit
  {

    public virtual global::System.Linq.IQueryable<T> BusinessUnitSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public RegistrationAssignmentBusinessUnitSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class RegistrationAssignmentFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::GD.DCSGovernmentModule.IRegistrationAssignment
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::GD.DCSGovernmentModule.IRegistrationAssignmentFilterState Filter { get; private set; }

    private global::GD.DCSGovernmentModule.IRegistrationAssignmentFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public RegistrationAssignmentFilteringServerHandler(global::GD.DCSGovernmentModule.IRegistrationAssignmentFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected RegistrationAssignmentFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      return query;
    }


  }

  public partial class RegistrationAssignmentSearchDialogServerHandler : global::Sungero.Workflow.AssignmentSearchDialogServerHandler
   {
     private global::GD.DCSGovernmentModule.Server.RegistrationAssignmentSearchDialogModel _dialog
     {
       get
       {
         return (global::GD.DCSGovernmentModule.Server.RegistrationAssignmentSearchDialogModel)this.Dialog;
       }
     }

     public RegistrationAssignmentSearchDialogServerHandler(global::GD.DCSGovernmentModule.Server.RegistrationAssignmentSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class RegistrationAssignmentServerHandlers : global::Sungero.Workflow.AssignmentServerHandlers
  {
    private global::GD.DCSGovernmentModule.IRegistrationAssignment _obj
    {
      get { return (global::GD.DCSGovernmentModule.IRegistrationAssignment)this.Entity; }
    }

    public RegistrationAssignmentServerHandlers(global::GD.DCSGovernmentModule.IRegistrationAssignment entity)
      : base(entity)
    {
    }
  }

  public partial class RegistrationAssignmentCreatingFromServerHandler : global::Sungero.Workflow.AssignmentCreatingFromServerHandler
  {
    private global::GD.DCSGovernmentModule.IRegistrationAssignment _source
    {
      get { return (global::GD.DCSGovernmentModule.IRegistrationAssignment)this.Source; }
    }

    private global::GD.DCSGovernmentModule.IRegistrationAssignmentInfo _info
    {
      get { return (global::GD.DCSGovernmentModule.IRegistrationAssignmentInfo)this._Info; }
    }

    public RegistrationAssignmentCreatingFromServerHandler(global::GD.DCSGovernmentModule.IRegistrationAssignment source, global::GD.DCSGovernmentModule.IRegistrationAssignmentInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// RegistrationAssignmentEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
}

// ==================================================================
// RegistrationAssignmentAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
  public class RegistrationAssignmentAccessRights : 
    Sungero.Workflow.Server.AssignmentAccessRights, GD.DCSGovernmentModule.IRegistrationAssignmentAccessRights
  {

    public RegistrationAssignmentAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class RegistrationAssignmentTypeAccessRights : 
    Sungero.Workflow.Server.AssignmentTypeAccessRights, GD.DCSGovernmentModule.IRegistrationAssignmentAccessRights
  {

    public RegistrationAssignmentTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// RegistrationAssignmentRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
    public class RegistrationAssignmentRepositoryImplementer<T> : 
      global::Sungero.Workflow.Server.AssignmentRepositoryImplementer<T>,
      global::GD.DCSGovernmentModule.IRegistrationAssignmentRepositoryImplementer<T>
      where T : global::GD.DCSGovernmentModule.IRegistrationAssignment 
    {
       public new global::GD.DCSGovernmentModule.IRegistrationAssignmentAccessRights AccessRights
       {
          get { return (global::GD.DCSGovernmentModule.IRegistrationAssignmentAccessRights)base.AccessRights; }
       }

       public new global::GD.DCSGovernmentModule.IRegistrationAssignmentInfo Info
       {
          get { return (global::GD.DCSGovernmentModule.IRegistrationAssignmentInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::GD.DCSGovernmentModule.Server.RegistrationAssignmentTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// RegistrationAssignmentPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
}

// ==================================================================
// RegistrationAssignmentServerFunctions.g.cs
// ==================================================================

namespace GD.DCSGovernmentModule.Server
{
  public partial class RegistrationAssignmentFunctions : global::Sungero.Workflow.Server.AssignmentFunctions
  {
    private global::GD.DCSGovernmentModule.IRegistrationAssignment _obj
    {
      get { return (global::GD.DCSGovernmentModule.IRegistrationAssignment)this.Entity; }
    }

    public RegistrationAssignmentFunctions(global::GD.DCSGovernmentModule.IRegistrationAssignment entity) : base(entity) { }
  }
}

// ==================================================================
// RegistrationAssignmentFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Functions
{
  internal static class RegistrationAssignment
  {
  }
}

// ==================================================================
// RegistrationAssignmentServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
  public class RegistrationAssignmentServerPublicFunctions : global::GD.DCSGovernmentModule.Server.IRegistrationAssignmentServerPublicFunctions
  {
  }
}

// ==================================================================
// RegistrationAssignmentQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Queries
{
  public class RegistrationAssignment
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("GD.DCSGovernmentModule.Server.RegistrationAssignment.RegistrationAssignmentQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// RegistrationAssignmentBlock.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
  public class RegistrationAssignmentArguments: global::Sungero.Workflow.Server.Route.AssignmentStartEventArguments<RegistrationAssignmentBlock, global::Sungero.Workflow.AssignmentBlock>
  {
    public RegistrationAssignmentArguments(RegistrationAssignmentBlock block) : base(block) { }
  }

  public class RegistrationAssignmentEndBlockEventArguments: global::Sungero.Workflow.Server.Route.AssignmentEndBlockEventArguments<RegistrationAssignmentBlock, global::Sungero.Workflow.AssignmentBlock, GD.DCSGovernmentModule.IRegistrationAssignment> 
  {
    public RegistrationAssignmentEndBlockEventArguments(RegistrationAssignmentBlock block) : base(block) { }
  }

  public partial class RegistrationAssignmentBlock : global::Sungero.Workflow.Blocks.AssignmentBlockWrapper<global::Sungero.Workflow.AssignmentBlock>    
  {
    public virtual global::Sungero.Company.IEmployee Registrar
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IEmployee>("Registrar"); }
      set { this.SetCustomNavigationProperty("Registrar", value); }
    }
    public virtual global::Sungero.Company.IBusinessUnit BusinessUnit
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IBusinessUnit>("BusinessUnit"); }
      set { this.SetCustomNavigationProperty("BusinessUnit", value); }
    }




    public RegistrationAssignmentBlock(global::Sungero.Workflow.AssignmentBlock block) : base(block) { }
  }
}

// ==================================================================
// RegistrationAssignmentChildWrappers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GD.DCSGovernmentModule.Server
{
}
